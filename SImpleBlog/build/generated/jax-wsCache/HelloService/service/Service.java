
package service;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.10-b140803.1500
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Service", targetNamespace = "http://Service/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Service {


    /**
     * 
     * @param konten
     * @param author
     * @param tanggal
     * @param judul
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addPost", targetNamespace = "http://Service/", className = "service.AddPost")
    @ResponseWrapper(localName = "addPostResponse", targetNamespace = "http://Service/", className = "service.AddPostResponse")
    public boolean addPost(
        @WebParam(name = "judul", targetNamespace = "")
        String judul,
        @WebParam(name = "konten", targetNamespace = "")
        String konten,
        @WebParam(name = "tanggal", targetNamespace = "")
        String tanggal,
        @WebParam(name = "author", targetNamespace = "")
        String author);

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns int
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "checkuserexist", targetNamespace = "http://Service/", className = "service.Checkuserexist")
    @ResponseWrapper(localName = "checkuserexistResponse", targetNamespace = "http://Service/", className = "service.CheckuserexistResponse")
    public int checkuserexist(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws Exception_Exception
    ;

    /**
     * 
     * @param password
     * @param role
     * @param nama
     * @param email
     * @param username
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editUser", targetNamespace = "http://Service/", className = "service.EditUser")
    @ResponseWrapper(localName = "editUserResponse", targetNamespace = "http://Service/", className = "service.EditUserResponse")
    public boolean editUser(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "nama", targetNamespace = "")
        String nama,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "role", targetNamespace = "")
        String role)
        throws Exception_Exception
    ;

    /**
     * 
     * @param status
     * @return
     *     returns java.util.List<service.Post>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listPost", targetNamespace = "http://Service/", className = "service.ListPost")
    @ResponseWrapper(localName = "listPostResponse", targetNamespace = "http://Service/", className = "service.ListPostResponse")
    public List<Post> listPost(
        @WebParam(name = "status", targetNamespace = "")
        String status)
        throws Exception_Exception
    ;

    /**
     * 
     * @param username
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getnama", targetNamespace = "http://Service/", className = "service.Getnama")
    @ResponseWrapper(localName = "getnamaResponse", targetNamespace = "http://Service/", className = "service.GetnamaResponse")
    public String getnama(
        @WebParam(name = "username", targetNamespace = "")
        String username)
        throws Exception_Exception
    ;

    /**
     * 
     * @param password
     * @param username
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "login", targetNamespace = "http://Service/", className = "service.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "http://Service/", className = "service.LoginResponse")
    public boolean login(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password)
        throws Exception_Exception
    ;

    /**
     * 
     * @param postId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deletePost", targetNamespace = "http://Service/", className = "service.DeletePost")
    @ResponseWrapper(localName = "deletePostResponse", targetNamespace = "http://Service/", className = "service.DeletePostResponse")
    public boolean deletePost(
        @WebParam(name = "postId", targetNamespace = "")
        String postId);

    /**
     * 
     * @param username
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUserRole", targetNamespace = "http://Service/", className = "service.GetUserRole")
    @ResponseWrapper(localName = "getUserRoleResponse", targetNamespace = "http://Service/", className = "service.GetUserRoleResponse")
    public String getUserRole(
        @WebParam(name = "username", targetNamespace = "")
        String username)
        throws Exception_Exception
    ;

    /**
     * 
     * @param author
     * @return
     *     returns java.util.List<service.Post>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getAuthorPost", targetNamespace = "http://Service/", className = "service.GetAuthorPost")
    @ResponseWrapper(localName = "getAuthorPostResponse", targetNamespace = "http://Service/", className = "service.GetAuthorPostResponse")
    public List<Post> getAuthorPost(
        @WebParam(name = "author", targetNamespace = "")
        String author)
        throws Exception_Exception
    ;

    /**
     * 
     * @param username
     * @return
     *     returns java.lang.String
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getemail", targetNamespace = "http://Service/", className = "service.Getemail")
    @ResponseWrapper(localName = "getemailResponse", targetNamespace = "http://Service/", className = "service.GetemailResponse")
    public String getemail(
        @WebParam(name = "username", targetNamespace = "")
        String username)
        throws Exception_Exception
    ;

    /**
     * 
     * @param password
     * @param role
     * @param nama
     * @param email
     * @param username
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addUser", targetNamespace = "http://Service/", className = "service.AddUser")
    @ResponseWrapper(localName = "addUserResponse", targetNamespace = "http://Service/", className = "service.AddUserResponse")
    public boolean addUser(
        @WebParam(name = "username", targetNamespace = "")
        String username,
        @WebParam(name = "password", targetNamespace = "")
        String password,
        @WebParam(name = "nama", targetNamespace = "")
        String nama,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "role", targetNamespace = "")
        String role)
        throws Exception_Exception
    ;

    /**
     * 
     * @param arg0
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "postResults", targetNamespace = "http://Service/", className = "service.PostResults")
    @ResponseWrapper(localName = "postResultsResponse", targetNamespace = "http://Service/", className = "service.PostResultsResponse")
    public String postResults(
        @WebParam(name = "arg0", targetNamespace = "")
        String arg0);

    /**
     * 
     * @param username
     * @return
     *     returns boolean
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteUser", targetNamespace = "http://Service/", className = "service.DeleteUser")
    @ResponseWrapper(localName = "deleteUserResponse", targetNamespace = "http://Service/", className = "service.DeleteUserResponse")
    public boolean deleteUser(
        @WebParam(name = "username", targetNamespace = "")
        String username)
        throws Exception_Exception
    ;

    /**
     * 
     * @param nama
     * @param komentar
     * @param id
     * @param email
     * @return
     *     returns java.lang.String
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "addComment", targetNamespace = "http://Service/", className = "service.AddComment")
    @ResponseWrapper(localName = "addCommentResponse", targetNamespace = "http://Service/", className = "service.AddCommentResponse")
    public String addComment(
        @WebParam(name = "id", targetNamespace = "")
        String id,
        @WebParam(name = "nama", targetNamespace = "")
        String nama,
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "komentar", targetNamespace = "")
        String komentar);

    /**
     * 
     * @return
     *     returns java.util.List<service.User>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listUser", targetNamespace = "http://Service/", className = "service.ListUser")
    @ResponseWrapper(localName = "listUserResponse", targetNamespace = "http://Service/", className = "service.ListUserResponse")
    public List<User> listUser()
        throws Exception_Exception
    ;

    /**
     * 
     * @param postId
     * @return
     *     returns java.util.List<service.Comment>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "listComment", targetNamespace = "http://Service/", className = "service.ListComment")
    @ResponseWrapper(localName = "listCommentResponse", targetNamespace = "http://Service/", className = "service.ListCommentResponse")
    public List<Comment> listComment(
        @WebParam(name = "postId", targetNamespace = "")
        String postId)
        throws Exception_Exception
    ;

    /**
     * 
     * @param konten
     * @param postId
     * @param judul
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "editPost", targetNamespace = "http://Service/", className = "service.EditPost")
    @ResponseWrapper(localName = "editPostResponse", targetNamespace = "http://Service/", className = "service.EditPostResponse")
    public boolean editPost(
        @WebParam(name = "postId", targetNamespace = "")
        String postId,
        @WebParam(name = "judul", targetNamespace = "")
        String judul,
        @WebParam(name = "konten", targetNamespace = "")
        String konten);

    /**
     * 
     * @param postId
     * @param status
     * @return
     *     returns boolean
     */
    @WebMethod(operationName = "ChangeStatusPost")
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "ChangeStatusPost", targetNamespace = "http://Service/", className = "service.ChangeStatusPost")
    @ResponseWrapper(localName = "ChangeStatusPostResponse", targetNamespace = "http://Service/", className = "service.ChangeStatusPostResponse")
    public boolean changeStatusPost(
        @WebParam(name = "postId", targetNamespace = "")
        String postId,
        @WebParam(name = "status", targetNamespace = "")
        String status);

    /**
     * 
     * @param postId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "deleteRealPost", targetNamespace = "http://Service/", className = "service.DeleteRealPost")
    @ResponseWrapper(localName = "deleteRealPostResponse", targetNamespace = "http://Service/", className = "service.DeleteRealPostResponse")
    public boolean deleteRealPost(
        @WebParam(name = "postId", targetNamespace = "")
        String postId);

    /**
     * 
     * @param postid
     * @return
     *     returns service.Post
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getPost", targetNamespace = "http://Service/", className = "service.GetPost")
    @ResponseWrapper(localName = "getPostResponse", targetNamespace = "http://Service/", className = "service.GetPostResponse")
    public Post getPost(
        @WebParam(name = "postid", targetNamespace = "")
        String postid)
        throws Exception_Exception
    ;

    /**
     * 
     * @param katakunci
     * @return
     *     returns java.util.List<service.Post>
     * @throws Exception_Exception
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "search", targetNamespace = "http://Service/", className = "service.Search")
    @ResponseWrapper(localName = "searchResponse", targetNamespace = "http://Service/", className = "service.SearchResponse")
    public List<Post> search(
        @WebParam(name = "katakunci", targetNamespace = "")
        String katakunci)
        throws Exception_Exception
    ;

    /**
     * 
     * @param postId
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "publishPost", targetNamespace = "http://Service/", className = "service.PublishPost")
    @ResponseWrapper(localName = "publishPostResponse", targetNamespace = "http://Service/", className = "service.PublishPostResponse")
    public boolean publishPost(
        @WebParam(name = "postId", targetNamespace = "")
        String postId);

}
